---
- name: Prepare the DO declaration from the template
  template:
    src: "{{ role_path }}/templates/{{ do_template }}"
    dest: "{{ tmp_dir }}/{{ do_declaration }}"

- name: Get BIG-IP Authentication Token from BIG-IP
  uri:
    body: '{"username":"{{ bigip_provider.user}}","password":"{{ bigip_provider.password}}","loginProviderName":"tmos"}'
    body_format: json
    method: POST
    url: "https://{{ bigip_provider.server }}/mgmt/shared/authn/login"
    status_code: 200
    validate_certs: "{{ bigip_provider.validate_certs }}"
  register: bigip_auth_response
  retries: 30
  delay: 5
  until: "(bigip_auth_response is successful) and (bigip_auth_response.status == 200)"

- name: Validate DO rest worker is ready
  uri:
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    method: GET
    url: "https://{{ bigip_provider.server }}/mgmt/shared/declarative-onboarding/available"
    validate_certs: "{{ bigip_provider.validate_certs }}"
  retries: 30
  delay: 5
  register: result
  until: "(result is successful) and (result.status == 200)"

- name: Use Declarative Onboarding to Async configure BIG-IP
  uri:
    body: "{{ lookup('file','{{ tmp_dir }}/{{ do_declaration }}') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    method: POST
    status_code: 202
    url: "https://{{ bigip_provider.server }}/mgmt/shared/declarative-onboarding"
    validate_certs: "{{ bigip_provider.validate_certs }}"

- name: Wait for Declarative Onboarding to finish up
  uri:
    url: "https://{{ bigip_provider.server }}/mgmt/shared/declarative-onboarding"
    status_code: 200
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    validate_certs: "{{ bigip_provider.validate_certs }}"
  register: result
  until: result.status == 200
  retries: 30
  delay: 10


- name: Prepare the common AS3 objects declaration from the template
  template:
    src: "{{ role_path }}/templates/{{ as3_ts_dependencies_template }}"
    dest: "{{ tmp_dir }}/{{ as3_ts_dependencies_declaration }}"

- name: Validate AS3 rest worker is ready
  uri:
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    method: GET
    url: "https://{{ bigip_provider.server }}/mgmt/shared/appsvcs/available"
    validate_certs: "{{ bigip_provider.validate_certs }}"
  retries: 30
  delay: 5
  register: result
  until: "(result is successful) and (result.status == 200)"

- name: Deploy common AS3 objects for use by Telemetry Streaming
  bigip_appsvcs_extension:
    content: "{{ lookup('file', '{{ tmp_dir }}/{{ as3_ts_dependencies_declaration }}') }}"
    state: present
    provider: "{{ bigip_provider }}"
  delegate_to: localhost


- name: Prepare the AS3 Juice Shop application declaration from the template
  template:
    src: "{{ role_path }}/templates/{{ as3_juiceshop_template }}"
    dest: "{{ tmp_dir }}/{{ as3_juiceshop_declaration }}"

- name: Deploy the Juice Shop app service configuration
  bigip_appsvcs_extension:
    content: "{{ lookup('file', '{{ tmp_dir }}/{{ as3_juiceshop_declaration }}') }}"
    state: present
    provider: "{{ bigip_provider }}"
  delegate_to: localhost


- name: Prepare the AS3 Grafana application declaration from the template
  template:
    src: "{{ role_path }}/templates/{{ as3_grafana_template }}"
    dest: "{{ tmp_dir }}/{{ as3_grafana_declaration }}"

- name: Deploy the Grafana app service configuration
  bigip_appsvcs_extension:
    content: "{{ lookup('file', '{{ tmp_dir }}/{{ as3_grafana_declaration }}') }}"
    state: present
    provider: "{{ bigip_provider }}"
  delegate_to: localhost


- name: Prepare the Telemetry Streaming declaration from the template
  template:
    src: "{{ role_path }}/templates/{{ ts_template }}"
    dest: "{{ tmp_dir }}/{{ ts_declaration }}"

- name: Validate Telemetry Streaming rest worker is ready
  uri:
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    method: GET
    url: "https://{{ bigip_provider.server }}/mgmt/shared/telemetry/available"
    validate_certs: "{{ bigip_provider.validate_certs }}"
  retries: 30
  delay: 5
  register: result
  until: "(result is successful) and (result.status == 200)"

- name: Use Telemetry Streaming to configure BIG-IP
  uri:
    body: "{{ lookup('file','{{ tmp_dir }}/{{ ts_declaration }}') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    method: POST
    status_code: 200
    url: "https://{{ bigip_provider.server }}/mgmt/shared/telemetry/declare"
    validate_certs: "{{ bigip_provider.validate_certs }}"

- name: Destroy an API token
  uri:
    url: "https://{{ bigip_provider.server }}/mgmt/shared/authz/tokens/{{ bigip_auth_response.json.token.token }}"
    method: DELETE
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_response.json.token.token }}"
    status_code: 200
    validate_certs: "{{ bigip_provider.validate_certs }}"
  register: bigip_auth_response
